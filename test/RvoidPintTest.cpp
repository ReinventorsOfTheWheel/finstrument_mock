#include "FooFixture.hpp"

void RvoidPintCaller();
void fooRvoidPint(int);
void fooRvoidPint_2(int);

void fake_fooRvoidPint(int a); // user provides
// should be generated by a macro
void fake_fooRvoidPint_aux(int count, ...) {
    ::ftest::called.insert(reinterpret_cast<char *>(fake_fooRvoidPint_aux));

    EXPECT_EQ(count, 1);

    va_list args;
    va_start(args, count);
    fake_fooRvoidPint(va_arg(args, int));
    va_end(args);
}

// User provides
void fake_fooRvoidPint(int a) {
    ::ftest::called.insert(reinterpret_cast<char *>(fake_fooRvoidPint));
    EXPECT_EQ(a, 13);
}

/// signature: void(int)
TEST_F(FooFixture, fooRvoidPint) {
    ::fake::subs.insert({address(fooRvoidPint), address(fake_fooRvoidPint_aux)});
    RvoidPintCaller();

    EXPECT_EQ(::ftest::called.count(address(fooRvoidPint)), 0);
    EXPECT_EQ(::ftest::called.count(address(fake_fooRvoidPint_aux)), 1);
    EXPECT_EQ(::ftest::called.count(address(fake_fooRvoidPint)), 1);
    EXPECT_EQ(::ftest::called.count(address(fooRvoidPint_2)), 1);
}
