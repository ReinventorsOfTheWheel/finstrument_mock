#include "FooFixture.hpp"

// The function that the user wants to test with replacing call expressions
// inside.
void RvoidPvoidCaller();
// The used functions inside that the user might replace
void fooRvoidPvoid();
void fooRvoidPvoid_2();

void fake_fooRvoidPvoid(); // user provides
// should be generated by a macro
void fake_fooRvoidPvoid_aux(int count, ...) {
    ::ftest::called.insert(reinterpret_cast<char *>(fake_fooRvoidPvoid_aux));
    EXPECT_EQ(count, 0);
    fake_fooRvoidPvoid();
}
// User provides
void fake_fooRvoidPvoid() {
    ::ftest::called.insert(reinterpret_cast<char *>(fake_fooRvoidPvoid));
}

/// signature: void()
TEST_F(FooFixture, fooRvoidPvoid) {
    ::fake::subs.insert(
        {address(fooRvoidPvoid), address(fake_fooRvoidPvoid_aux)});
    RvoidPvoidCaller();

    EXPECT_EQ(::ftest::called.count(address(fooRvoidPvoid)), 0);
    EXPECT_EQ(::ftest::called.count(address(fake_fooRvoidPvoid_aux)), 1);
    EXPECT_EQ(::ftest::called.count(address(fake_fooRvoidPvoid)), 1);
    EXPECT_EQ(::ftest::called.count(address(fooRvoidPvoid_2)), 1);
}
