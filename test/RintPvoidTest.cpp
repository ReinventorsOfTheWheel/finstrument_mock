#include "FooFixture.hpp"

// The function that the user wants to test with replacing call expressions
// inside.
int RintPvoidCaller();
// The used functions inside that the user might replace
int RintPvoid();
int RintPvoid_2();

int fake_RintPvoid(); // user provides
// should be generated by a macro
void fake_RintPvoid_aux(int count, void* ret_value, int ret_size, ...) {
    ::ftest::called.insert(reinterpret_cast<char *>(fake_RintPvoid_aux));
    EXPECT_EQ(count, 0);
    EXPECT_NE(ret_value, nullptr);
    EXPECT_EQ(ret_size, sizeof(int) * 8);
    auto fake_res = fake_RintPvoid();
    memcpy(ret_value, &fake_res, sizeof(int));
}
// User provides
int fake_RintPvoid() {
    ::ftest::called.insert(reinterpret_cast<char *>(fake_RintPvoid));
    return 42;
}

TEST_F(FooFixture, RintPvoidReplaced) {
    ::fake::subs.insert(
        {address(RintPvoid), address(fake_RintPvoid_aux)});
    auto res = RintPvoidCaller();

    EXPECT_EQ(::ftest::called.count(address(RintPvoid)), 0);
    EXPECT_EQ(::ftest::called.count(address(fake_RintPvoid_aux)), 1);
    EXPECT_EQ(::ftest::called.count(address(fake_RintPvoid)), 1);
    EXPECT_EQ(::ftest::called.count(address(RintPvoid_2)), 1);
    EXPECT_EQ(res, 42);
}

TEST_F(FooFixture, RintPvoidOriginal) {
    auto res = RintPvoidCaller();
    EXPECT_EQ(::ftest::called.count(address(RintPvoid)), 1);
    EXPECT_EQ(::ftest::called.count(address(fake_RintPvoid_aux)), 0);
    EXPECT_EQ(::ftest::called.count(address(fake_RintPvoid)), 0);
    EXPECT_EQ(::ftest::called.count(address(RintPvoid_2)), 1);
    EXPECT_EQ(res, 13); // 13 comes from the definition of RintPvoid()
}
