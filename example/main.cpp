#include <gtest/gtest.h>
#include "hook.hpp"

#include "foo.hpp"
#include "called.hpp"

// The user should not need to handle varargs
// Later, a macro will generate the functions that use varargs
#include <cstdarg>

template <typename T>
char *address(T t) {
    return reinterpret_cast<char *>(t);
}

/// bar calls foo and foo_2,
/// we want to fake foo, but not foo_2
void bar();



void fake_fooRvoidPvoid(); // user provides
// should be generated by a macro
void fake_fooRvoidPvoid_0(int count, ...) {
    test::called.insert(reinterpret_cast<char *>(fake_fooRvoidPvoid_0));
    EXPECT_EQ(count, 0);
    fake_fooRvoidPvoid();
}
// User provides
void fake_fooRvoidPvoid() {
    test::called.insert(reinterpret_cast<char *>(fake_fooRvoidPvoid));
}

/// signature: void()
TEST(Foo, fooRvoidPvoid) {
    test::called.clear();
    ::fake::subs.clear();

    ::fake::subs.insert({address(fooRvoidPvoid), address(fake_fooRvoidPvoid_0)});
    bar();

    EXPECT_EQ(test::called.count(address(fooRvoidPvoid)), 0);
    EXPECT_EQ(test::called.count(address(fake_fooRvoidPvoid_0)), 1);
    EXPECT_EQ(test::called.count(address(fake_fooRvoidPvoid)), 1);
    EXPECT_EQ(test::called.count(address(fooRvoidPvoid_2)), 1);
}


void fake_fooRvoidPint(int a); // user provides
// should be generated by a macro
void fake_fooRvoidPint_0(int count, ...) {
    test::called.insert(reinterpret_cast<char *>(fake_fooRvoidPint_0));

    EXPECT_EQ(count, 1);

    va_list args;
    va_start(args, count);
    fake_fooRvoidPint(va_arg(args, int));
    va_end(args);
}

// User provides
void fake_fooRvoidPint(int a) {
    test::called.insert(reinterpret_cast<char *>(fake_fooRvoidPint));
    EXPECT_EQ(a, 13);
}

/// signature: void(int)
TEST(Foo, fooRvoidPint) {
    test::called.clear();
    ::fake::subs.clear();

    ::fake::subs.insert({address(fooRvoidPint), address(fake_fooRvoidPint_0)});
    bar();

    EXPECT_EQ(test::called.count(address(fooRvoidPint)), 0);
    EXPECT_EQ(test::called.count(address(fake_fooRvoidPint_0)), 1);
    EXPECT_EQ(test::called.count(address(fake_fooRvoidPint)), 1);
    EXPECT_EQ(test::called.count(address(fooRvoidPint_2)), 1);
}

int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}

