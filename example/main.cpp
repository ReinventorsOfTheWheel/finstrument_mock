#include <gtest/gtest.h>
#include "hook.hpp"

#include "foo.hpp"
#include "called.hpp"

#include <cstdarg>
void fake_fooRvoidPint(int a); // user provides
// should be generated by a macro
void fake_fooRvoidPint_0(int count, ...) {
    test::called.insert(reinterpret_cast<char *>(fake_fooRvoidPint_0));

    EXPECT_EQ(count, 1);

    va_list args;
    va_start(args, count);
    fake_fooRvoidPint(va_arg(args, int));
    va_end(args);
}

// User provides
void fake_fooRvoidPint(int a) { EXPECT_EQ(a, 13); }

/// bar calls foo and foo_2,
/// we want to fake foo, but not foo_2
void bar();

template <typename T>
char *address(T t) {
    return reinterpret_cast<char *>(t);
}

/// signature: void(int)
TEST(Foo, fooRvoidPint) {
    ::fake::subs.insert({address(fooRvoidPint), address(fake_fooRvoidPint_0)});
    bar();

    EXPECT_EQ(test::called.count(address(fooRvoidPint)), 0);
    EXPECT_EQ(test::called.count(address(fake_fooRvoidPint_0)), 1);
    EXPECT_EQ(test::called.count(address(fooRvoidPint_2)), 1);
}

int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}

